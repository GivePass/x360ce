using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using System.Xml;
using System.Text;
using System.ComponentModel;
using System.Windows.Forms;
using System.Linq;
using x360ce.Engine;

namespace x360ce.App
{
    [Serializable]
    public class SettingsFile
    {

        /// <summary>
        /// Default settings generated by choosing most popular configuration.
        /// </summary>
		SortableBindingList<x360ce.Engine.Data.Program> _Programs;
        /// <summary>
        /// Individual user settings.
        /// </summary>
		SortableBindingList<x360ce.Engine.Data.Game> _Games;
        /// <summary>
        /// Pad Configuration.
        /// </summary>
		SortableBindingList<x360ce.Engine.Data.PadSetting> _Pads;

        public SettingsFile()
        {
			_Games = new SortableBindingList<x360ce.Engine.Data.Game>();
			_Games.AddingNew += _Games_AddingNew;
			_Games.ListChanged += _Games_ListChanged;
			_Programs = new SortableBindingList<x360ce.Engine.Data.Program>();
			_Pads = new SortableBindingList<x360ce.Engine.Data.PadSetting>();
        }

		void _Games_ListChanged(object sender, ListChangedEventArgs e)
		{
		
		}

		void _Games_AddingNew(object sender, AddingNewEventArgs e)
		{
			
		}

        static SettingsFile _current;
        public static SettingsFile Current
        {
            get { return _current = _current ?? new SettingsFile(); }
        }

        public SortableBindingList<x360ce.Engine.Data.Game> Games { get { return _Games; } }
		public SortableBindingList<x360ce.Engine.Data.Program> Programs { get { return _Programs; } }
		public SortableBindingList<x360ce.Engine.Data.PadSetting> Pads { get { return _Pads; } }

        const string FileName = "x360ce.xml";
        object saveReadFileLock = new object();

        public void Save()
        {
            lock (saveReadFileLock)
            {
                Serializer.SerializeToXmlFile(this, FileName, System.Text.Encoding.UTF8);
            }
        }

        public void Load()
        {
            // If configuration file exists then...
            if (System.IO.File.Exists(FileName))
            {
                SettingsFile data;
                // Deserialize and load data.
                lock (saveReadFileLock)
                {
                    data = Serializer.DeserializeFromXmlFile<SettingsFile>(FileName);
                }
                if (data == null) return;
                Programs.Clear();
                if (data.Programs != null) for (int i = 0; i < data.Programs.Count; i++) Programs.Add(data.Programs[i]);
                Games.Clear();
                if (data.Games != null) for (int i = 0; i < data.Games.Count; i++) Games.Add(data.Games[i]);
                Pads.Clear();
                if (data.Pads != null) for (int i = 0; i < data.Pads.Count; i++) Pads.Add(data.Pads[i]);
			}
			else
			{
				var resource = EngineHelper.GetResource("x360ce.Games.xml.gz");
				// If internal preset was found.
				if (resource != null)
				{
					var sr = new StreamReader(resource);
					var compressedBytes = default(byte[]);
					using (var memstream = new MemoryStream())
					{
						sr.BaseStream.CopyTo(memstream);
						compressedBytes = memstream.ToArray();
					}
					var bytes = EngineHelper.Decompress(compressedBytes);
					var xml = System.Text.Encoding.UTF8.GetString(bytes);
					var programs = Serializer.DeserializeFromXmlString<List<x360ce.Engine.Data.Program>>(xml);
					Programs.Clear();
					for (int i = 0; i < programs.Count; i++) Programs.Add(programs[i]);
				}
			}
            // Check if current app doesn't exist in the list then...
            var currentFile = new System.IO.FileInfo(Application.ExecutablePath);
            var currentGame = Games.FirstOrDefault(x => x.FileName == currentFile.Name);
            if (currentGame == null)
            {
                // Add x360ce.exe
                var item = x360ce.Engine.Data.Game.FromDisk(currentFile.Name);
                var program = Programs.FirstOrDefault(x => x.FileName == currentFile.Name);
                item.LoadDefault(program);
                SettingsFile.Current.Games.Add(item);
            }
            else
            {
                currentGame.FullPath = currentFile.FullName;
            }
        }

    }
}
